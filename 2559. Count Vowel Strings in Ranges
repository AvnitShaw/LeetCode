class Solution {
public:
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        int n = words.size();
        vector<int> prefix(n + 1, 0); 
        unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};
        
        auto isVowelString = [&](const string& word) {
            return vowels.count(word.front()) && vowels.count(word.back());
        };

        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + (isVowelString(words[i]) ? 1 : 0);
        }
        vector<int> result;
        for (const auto& query : queries) {
            int start = query[0];
            int end = query[1];
            result.push_back(prefix[end + 1] - prefix[start]);
        }

        return result;
    }
};
