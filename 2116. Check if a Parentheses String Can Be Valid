class Solution {
public:
    bool canBeValid(string s, string locked) {
       int n = s.size();

        if (n % 2 != 0) return false;

        int openCount = 0, unlocked = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '1') {
                if (s[i] == '(') 
                    openCount++;
                else 
                    openCount--;
            } else {
                unlocked++;
            }

            if (openCount + unlocked < 0) return false;
        }

        int closeCount = 0;
        unlocked = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (locked[i] == '1') {
                if (s[i] == ')') 
                    closeCount++;
                else 
                    closeCount--;
            } else {
                unlocked++;
            }

            if (closeCount + unlocked < 0) return false;
        }

        return true;
    };
};
